import 'package:chem_x/Module/single_element_data.dart';
import 'package:chem_x/View/element_tile.dart';
import 'package:chem_x/module/single_element_data.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'dart:convert';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'home_page.dart' as colors;
import 'package:hexcolor/hexcolor.dart';


class PeriodicTable extends StatefulWidget {
  PeriodicTable({Key? key}) : super(key: key);

  // final periodicList = rootBundle
  //     .loadString("assets/data/elementsData.json")
  //     .then((value) => jsonDecode(value)['myelements'] as List)
  //     .then((list) => list
  //     .map((json) => json != null ? Autogenerated.fromJson(json) : null)
  //     .toList());
  @override
  _PeriodicTableState createState() => _PeriodicTableState();
}

class _PeriodicTableState extends State<PeriodicTable> {
  List<dynamic> _items = [];
  String myColor="#00000";
  // Fetch content from the json file
  Future<void> readJson() async {
    final String response =
        await rootBundle.loadString("assets/data/elementsData.json");
    final data = await json.decode(response);
    setState(() {
      _items = data["myelements"];
    });
  }

  _buildTable(List elements) {
    // final forGrid = elements
    //     .map(
    //       (element) => elements != null
    //           ? ElementTile(element: element!)
    //           : Container(
    //               margin: EdgeInsets.all(1.w),
    //               decoration: BoxDecoration(
    //                 borderRadius: BorderRadius.circular(10),
    //               ),
    //             ),
    //     )
    //     .toList();
    //

    return GridView.builder(
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 9, crossAxisSpacing: 2, mainAxisSpacing: 10),
      scrollDirection: Axis.horizontal,
      itemCount: _items.length,
      itemBuilder: (_, index) {
        if (_items[index] == null) {
          return Container(
                width: 100,
              );
        } else {
          myColor="#00000";
          switch(_items[index]["category"]){
            case "noble gas":
              myColor=colors.noble_gases;
              break;
            case "diatomic nonmetal":
              myColor=colors.reactive_nonmetals;
              break;
            case "polyatomic nonmetal":
              myColor=colors.reactive_nonmetals;
              break;
            case "metalloid":
              myColor=colors.metalloids;
              break;
            case "post-transition metal":
              myColor=colors.post_transition_metals;
              break;
            case "unknown, probably transition metal":
              myColor=colors.unknown_properties;
              break;
            case "alkali metal":
              myColor=colors.alkali_metals;
              break;
            case "alkaline earth metal":
              myColor=colors.alkaline_earth_metals;
              break;
            case "transition metal":
              myColor=colors.transition_metals;
              break;
            case "lanthanide":
              myColor=colors.lanthanides;
              break;
            case "actinide":
              myColor=colors.actinides;
          }
          return Container(
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(10),
                  border: Border.all(color: HexColor("${myColor}"), width: 2),
                  color: HexColor("${myColor}"),
                ),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.start,
                  children: [
                    Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const SizedBox(
                          width: 5,
                        ),
                        Text("${_items[index]["number"]}", style: const TextStyle(color: Colors.white),),
                        const SizedBox(
                          width: 20,
                        ),
                        //Text("${_items[index]["atomic_mass"].toStringAsFixed(3)}"),
                      ],
                    ),
                    Text(_items[index]["symbol"],
                        style: const TextStyle(fontSize: 15, color: Colors.white, fontWeight: FontWeight.bold)),
                    Text(_items[index]["name"],
                        style: const TextStyle(fontSize: 8, fontWeight: FontWeight.bold, color: Colors.white)),
                  ],
                ),
              );
        }
      },
    );

    // return Column(
    //   children: [
    //     // Display the data loaded from sample.json
    //     _items.isNotEmpty
    //         ? Expanded(
    //       child: ListView.builder(
    //         itemCount: _items.length,
    //         itemBuilder: (context, index) {
    //           return Card(
    //             key: ValueKey(_items[index]["name"]),
    //             margin: const EdgeInsets.all(10),
    //             color: Colors.white24,
    //             child: ListTile(
    //               leading: Text(_items[index]["category"]),
    //               title: Text(_items[index]["name"]),
    //               subtitle: Text(_items[index]["symbol"]),
    //             ),
    //           );
    //         },
    //       ),
    //     )
    //         : Container(child: Text("ERROR"),)
    //   ],
    // );

    //  return SingleChildScrollView(
    //   child: SizedBox(
    //     height: 100,
    //     child: GridView.count(
    //       crossAxisCount: 10,
    //       children: <Widget>[...forGrid],
    //     ),
    //   ),
    // );
  }

  @override
  Widget build(BuildContext context) {
    if (_items.isNotEmpty) {
      return _buildTable(_items);
    } else {
      readJson();
      return const Center(child: CircularProgressIndicator());
    }
  }

  // return FutureBuilder(
  //   future: _items,
  //   builder: (context, AsyncSnapshot snapshot) => snapshot.hasData
  //       ? _buildTable(snapshot.data)
  //       : const Center(
  //           child: CircularProgressIndicator(),
  //         ),
  // );

}
